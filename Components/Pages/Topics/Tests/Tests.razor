@page "/topics/{id}/tests"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using BlazorAppCrud.Data;
@using BlazorAppCrud.Models.Entities
@using BlazorAppCrud.Services;
@inherits OwningComponentBase<QuestionsService>
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "User,Admin")]
@using Microsoft.AspNetCore.Components
@using BlazorAppCrud.Components.Pages.Topics.Tests.components

<PageTitle>Test</PageTitle>

<h1>Test</h1>

@* <p>Questions: @QuestionsCount</p> *@
<p>Correct: @CorrectAnswersCount</p>
<p>Wrong: @WrongAnswersCount</p>

<div class="gap-y-2">
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-bar" style="width: @progress%"></div>
    </div>
    <div class="mb-2" />
    @* @foreach (var item in qclist) *@
    @* { *@
    @*     <QuestionCard *@
    @*         Question="@item" *@
    @*         @bind-CorrectAnswersCount="CorrectAnswersCount" *@
    @*         @bind-WrongAnswersCount="WrongAnswersCount" /> *@
    @* } *@
    <QuestionCard
        @key="currentQuestionIndex"
        Question="@qclist[currentQuestionIndex]"
        @bind-CorrectAnswersCount="CorrectAnswersCount"
        @bind-WrongAnswersCount="WrongAnswersCount"/>
    <div class="mt-4"/>
    @if (currentQuestionIndex == QuestionsCount - 1)
    {
        <button class="btn primary">Finish Test</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="nextQuestion">Next Question</button>
    }
    @* <button class="btn primary" @onclick="nextQuestion">Next Question</button> *@
</div>

@code {
    [Parameter] public string id { get; set; }

    public int QuestionsCount;
    public int CorrectAnswersCount;
    public int WrongAnswersCount;

    public int progress = 0;

    public int currentQuestionIndex;

    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    IList<QuestionsClass> qclist;
    
    protected override void OnInitialized()
    {
        qclist = Service.GetTestQuestionsByTopicId(id, 5);
        QuestionsCount = qclist.Count;
        progress = (currentQuestionIndex + 1) * 100 / QuestionsCount;
    }

    private void nextQuestion()
    {
        if (currentQuestionIndex < QuestionsCount - 1 && currentQuestionIndex + 1 < QuestionsCount)
        {
            currentQuestionIndex++;
            progress = (currentQuestionIndex + 1) * 100 / QuestionsCount;
        }
    }

    private void HandleAnswerChecked(bool isCorrect)
    {
        if (isCorrect)
        {
            CorrectAnswersCount++;
        }
        else
        {
            WrongAnswersCount++;
        }
    }

}