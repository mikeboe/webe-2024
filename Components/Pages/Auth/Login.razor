@page "/Login"
@using System.Diagnostics
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using BlazorAppCrud.Models.Entities
@* @rendermode InteractiveServer *@
@using BlazorAppCrud.Models.ViewModels
@using BlazorAppCrud.Services;
@inherits OwningComponentBase<AuthService>
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="@Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
                <span class="text-danger">@working</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <div class="mt-5 mb-3 d-grid gap-2">
                <div>
                    Not a member? <a href="/users/add">Register</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private string working;
    
    private async Task Authenticate()
    {
        Console.WriteLine("Authenticate");
        try {
            working = "Working...";
            UserClass user = new UserClass();
            
            user = Service.AuthenticateUser(Model.UserName, Model.Password);
            // Model.UserName = "";
            // Model.Password = "";
            Console.WriteLine("User: " + user.UserName);

            var claims = new List<Claim>
            {
                new(ClaimTypes.Name, user.UserName),
                new(ClaimTypes.Role, user.Role)
            };
            
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            
            var principal = new ClaimsPrincipal(identity);

            if (HttpContext != null) await HttpContext.SignInAsync(principal);

            NavigationManager.NavigateTo("/");
            Console.WriteLine("NavigateTo /");
        } catch (Exception ex) {
            errorMessage = ex.Message;
            Model.Password = "";
            working = "";
        }
    }

}